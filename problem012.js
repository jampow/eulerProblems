/**
 * Problem 12
 * https://projecteuler.net/problem=12
 *
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The 
 * first ten terms would be:
 * 
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 *
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred 
 * divisors?
 */

const triang = num => {
	let sum = 0
	let i = 1
	while(i <= num) {
		sum += i
		i++
	}
	return sum
}

const factor = num => {
	let f = []
	let i = 1
	while(i <= num) {
		if(num % i === 0) f.push(i)
		i++
	}
	return f
}

const findTriangle = num => {
	let i = 1
	while(factor(triang(i)).length <= num)
		i++
	return i
}

console.log(triang(7))
console.log(factor(28))
console.log(findTriangle(500))
